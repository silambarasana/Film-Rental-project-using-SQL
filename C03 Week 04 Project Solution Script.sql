use film_rental;

-- Q 1. What is the total revenue generated from all rentals in the database? 
select * from payment;
select sum(amount) as Revenue from payment;

-- Q 2. How many rentals were made in each month_name? 
select * from rental;
select month(rental_date) as month, count(*) from rental group by month(rental_date);
select count(*) from rental;

-- Q 3. What is the rental rate of the film with the longest title in the database? 
select * from film;
select title, rental_rate from film where length(title) = (select max(length(title)) from film);

-- Q 4.	What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
select * from payment;
select avg(amount) from payment where datediff(payment_date, "2005-05-05 22:04:30") >= 30;

-- Q 5.	What is the most popular category of films in terms of the number of rentals? 
select c.name, count(*) from inventory i
join rental r 
join film_category fc
join category c
on i.inventory_id = r.inventory_id and 
i.film_id = fc.film_id and 
fc.category_id = c.category_id
group by c.name order by count(*) desc;

-- Q 6. Find the longest movie duration from the list of films that have not been rented by any customer.
select film_id, title, length as duration from film
where film_id not in (select film_id from inventory) order by duration desc limit 1;

-- Q 7. What is the average rental rate for films, broken down by category? 
select c.name, avg(rental_rate) from film f
join film_category fc
join category c
on f.film_id = fc.film_id and
fc.category_id = c.category_id
group by c.name;

-- Q 8.What is the total revenue generated from rentals for each actor in the database? 
select * from actor;
select  a.first_name, a.last_name, sum(p.amount) from payment p
join rental r
join inventory i
join film_actor fa
join actor a
on p.rental_id = r.rental_id and
r.inventory_id = i.inventory_id and
i.film_id = fa.film_id and
fa.actor_id = a.actor_id
group by a.first_name, a.last_name;

-- Q 9.Show all the actresses who worked in a film having a "Wrestler" in the description. 
select first_name, last_name, title from actor a
join film_actor fa
join film f
on a.actor_id = fa.actor_id and
fa.film_id = f.film_id where f.description like '%Wrestler%';

-- Q 10.Which customers have rented the same film more than once? 
select * from rental;
select * from inventory;
select * from customer;
select c.first_name, c.last_name from rental r
join inventory i
join customer c
on c.customer_id = r.customer_id and
r.inventory_id = i.inventory_id
group by i.film_id, c.customer_id
having count(*) > 1;

-- Q 11.How many films in the comedy category have a rental rate higher than the average rental rate?
select title from film f
join film_category fc
join category c
on f.film_id = fc.film_id and
fc.category_id = c.category_id
where c.name like 'Comedy' and rental_rate > (select avg(rental_rate) from film);

-- Q 12.Which films have been rented the most by customers living in each city? 
select ci.city, count(f.film_id) as rented_films from film f join inventory i
join rental r join customer c join address a join city ci
on f.film_id = i.film_id and i.inventory_id = r.inventory_id and r.customer_id = c.customer_id
and c.address_id = a.address_id and a.city_id = ci.city_id group by ci.city order by rented_films asc;

-- Q 13.What is the total amount spent by customers whose rental payments exceed $200?
select c.customer_id, concat_ws(' ',first_name, last_name), sum(amount) as total_amount from payment p 
join customer c on p.customer_id = c.customer_id group by p.customer_id having total_amount > 200;

-- Q 14.Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema] 
select distinct constraint_name from information_schema.table_constraints where table_name = 'rental' and constraint_type = 'FOREIGN KEY';

-- Q 15.Create a View for the total revenue generated by each staff member, broken down by store city with the country name. 
create view revenue_by_store
as (
select s.staff_id, st.store_id, concat_ws(' ', first_name, last_name) as Name, concat_ws(' ', city, country) as location, sum(amount) from payment p
join staff s join store st join address a join city ci join country c
on p.staff_id = s.staff_id and s.store_id = st.store_id and st.address_id = a.address_id and a.city_id = ci.city_id and ci.country_id = c.country_id
group by staff_id);

select * from revenue_by_store;

-- Q 16.Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, 
--  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. 
create view rental_information
as (
select concat_ws(' ', first_name, last_name) as customer_name, title, amount, 
datediff(return_date, rental_date) as no_of_rental_days,
dense_rank () over(partition by r.customer_id order by rental_date, return_date) as visiting_day,
round(cume_dist () over(partition by r.customer_id order by rental_date, return_date) * 100,2) as percentage
from rental r join customer c join payment p join inventory i join film f
on r.customer_id = c.customer_id and r.rental_id = p.rental_id and 
r.inventory_id = i.inventory_id and i.film_id = f.film_id);

select * from rental_information;

-- Q 17.Display the customers who paid 50% of their total rental costs within one day. 
select * from rental_information
 where percentage = 50 and no_of_rental_days  < 1;





